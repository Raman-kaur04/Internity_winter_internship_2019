In my code i have made five functions namely:
1) push function have time complexity: O(n) which pushes elements intop the stack
2) pop function having time complexity O(1) which pops the lastly added element in the stack
3) top function having time complexity O(1) which returns the top element of the existing stack
4) isEmpty function having time complexity O(1) which tells whether the stack is empty or not.
5) size function having time complexity O(1) which returns the size of the stack.
the space complexity of the implmentation is O(1).

We know that stack is LIFO(last in first out) and queue is FIFO(first in first out).
I have used 2 queues for the implementation of the algorithm.
In my implementation the push function is the costly one.

for the push function:
i firstly check which queue is empty. then i push the element into the empty queue. then push the elements of the other queue into this queue thus storing the elements like stack and the other queue becomes empty after this and it is furthur used for adding more elements in the same manner.

for the pop function:
i simply check which queue is non empty and pop the first element from the queue as the queue is storing elements in stack manner and the top element of trhe queue will be the element to be poped.

for top function:
checking the non empty queue and then returning the front element of the queue.

for size function:
checking the size of the non empty queue.

for isEmpty function:
checking both the queues are empty or not.